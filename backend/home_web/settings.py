# -*- coding: utf-8 -*-
# pylint: disable=no-init
"""
Django settings for home_web project.

Generated by 'django-admin startproject' using Django 1.10.

For more information on this file, see
https://docs.djangoproject.com/en/1.10/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.10/ref/settings/
"""

import os
import re

from celery.schedules import crontab
from configurations import Configuration, values


class CeleryBrokerURLValue(values.Value):
    """
    Value subclass that converts 'unix://' scheme to 'redis+socket://'.
    """

    def to_python(self, value):
        return re.sub(
            r'^unix://', 'redis+socket://', super().to_python(value)
        )


class Common(Configuration):

    # Build paths inside the project like this: os.path.join(BASE_DIR, ...)
    BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

    # Quick-start development settings - unsuitable for production
    # See https://docs.djangoproject.com/en/1.10/howto/deployment/checklist/

    # SECURITY WARNING: keep the secret key used in production secret!
    SECRET_KEY = '5w$77!lmo&g)e5j6uhl4i2=nffnnj0y1y07(9@-f)@b7*g%+sd'

    # SECURITY WARNING: don't run with debug turned on in production!
    DEBUG = True

    ALLOWED_HOSTS = []

    INTERNAL_IPS = [
        '127.0.0.1',
    ]

    # Application definition
    INSTALLED_APPS = [
        'core.apps.CoreConfig',
        'heating.apps.HeatingConfig',
        'django.contrib.admin',
        'django.contrib.auth',
        'django.contrib.contenttypes',
        'django.contrib.sessions',
        'django.contrib.messages',
        'whitenoise.runserver_nostatic',
        'django.contrib.staticfiles',
        'django_filters',
        'rest_framework',
    ]

    MIDDLEWARE = [
        'django.middleware.security.SecurityMiddleware',
        'whitenoise.middleware.WhiteNoiseMiddleware',
        'django.contrib.sessions.middleware.SessionMiddleware',
        'django.middleware.common.CommonMiddleware',
        'django.middleware.csrf.CsrfViewMiddleware',
        'django.contrib.auth.middleware.AuthenticationMiddleware',
        'django.contrib.messages.middleware.MessageMiddleware',
        'django.middleware.clickjacking.XFrameOptionsMiddleware',
    ]

    ROOT_URLCONF = 'home_web.urls'

    TEMPLATES = [
        {
            'BACKEND': 'django.template.backends.django.DjangoTemplates',
            'DIRS': [],
            'APP_DIRS': True,
            'OPTIONS': {
                'context_processors': [
                    'django.template.context_processors.debug',
                    'django.template.context_processors.request',
                    'django.contrib.auth.context_processors.auth',
                    'django.contrib.messages.context_processors.messages',
                ],
            },
        },
    ]

    WSGI_APPLICATION = 'home_web.wsgi.application'

    # Database
    # https://docs.djangoproject.com/en/1.10/ref/settings/#databases
    DATABASES = values.DatabaseURLValue(
        'sqlite:///{}'.format(os.path.join(BASE_DIR, 'db.sqlite3'))
    )

    # Password validation
    # https://docs.djangoproject.com/en/1.10/ref/settings/#auth-password-validators
    AUTH_PASSWORD_VALIDATORS = [
        {
            'NAME':
            'django.contrib.auth.password_validation.'
            'UserAttributeSimilarityValidator',
        },
        {
            'NAME':
            'django.contrib.auth.password_validation.'
            'MinimumLengthValidator',
        },
        {
            'NAME':
            'django.contrib.auth.password_validation.'
            'CommonPasswordValidator',
        },
        {
            'NAME':
            'django.contrib.auth.password_validation.'
            'NumericPasswordValidator',
        },
    ]

    # Internationalization
    # https://docs.djangoproject.com/en/1.10/topics/i18n/
    LANGUAGE_CODE = 'fr-FR'

    TIME_ZONE = 'Europe/Paris'

    USE_I18N = True

    USE_L10N = True

    USE_TZ = True

    # Static files (CSS, JavaScript, Images)
    # https://docs.djangoproject.com/en/1.10/howto/static-files/
    STATIC_URL = '/django-static/'
    STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
    STATICFILES_STORAGE = (
        'whitenoise.storage.CompressedManifestStaticFilesStorage'
    )

    REDIS_URL = values.Value()

    CELERY_BROKER_URL = CeleryBrokerURLValue(environ_name='REDIS_URL')
    CELERY_TASK_ROUTES = {
        'heating.tasks.*': {'queue': 'celery', 'delivery_mode': 'transient'},
    }
    CELERY_BEAT_SCHEDULE = {
        'update-pilotwire-status': {
            'task': 'heating.pilotwire.update_status',
            'schedule': 60,
        },
        'set-pilotwire-modes': {
            'task': 'heating.pilotwire.set_modes',
            'schedule': crontab(minute='*/15'),
        },
        'weekly-clear-old-derogations': {
            'task': 'heating.tasks.clearoldderogations',
            'schedule': crontab(minute=0, hour=0, day_of_week='mon'),
            'args': (7,),
        },
    }
    CELERY_TIME_ZONE = TIME_ZONE

    PILOTWIRE_IP = values.IPValue()
    PILOTWIRE_PORT = values.IntegerValue()


class Dev(Common):
    """
    The in-development settings and the default configuration
    """

    INSTALLED_APPS = Common.INSTALLED_APPS + [
        'debug_toolbar',
    ]

    MIDDLEWARE = [
        'debug_toolbar.middleware.DebugToolbarMiddleware',
    ] + Common.MIDDLEWARE


class Test(Common):
    """
    The testing settings
    """

    LOGGING = {
        'version': 1,
        'disable_existing_loggers': False,
        'handlers': {
            'pilotwire_testing_handler': {
                'level': 'INFO',
                'class': 'heating.log.PilotwireHandler',
                'logLength': 5,
            },
        },
        'loggers': {
            'pilotwire_testing_logger': {
                'handlers': ['pilotwire_testing_handler'],
                'level': 'INFO',
            },
        },
    }

    EMAIL_BACKEND = 'django.core.mail.backends.locmem.EmailBackend'

    ADMINS = [('Test', 'test@example.com')]


class Prod(Common):
    """
    The in-production settings
    """

    DEBUG = False

    SECRET_KEY = values.SecretValue()

    ADMINS = values.SingleNestedTupleValue()

    ALLOWED_HOSTS = values.ListValue()

    DATABASES = values.DatabaseURLValue()

    EMAIL = values.EmailURLValue()

    REST_FRAMEWORK = {
        'DEFAULT_RENDERER_CLASSES': (
            'rest_framework.renderers.JSONRenderer',
        ),
        'DEFAULT_PARSER_CLASSES': (
            'rest_framework.parsers.JSONParser',
        ),
    }

    LOGGING = {
        'version': 1,
        'disable_existing_loggers': False,
        'handlers': {
            'pilotwire_handler': {
                'level': 'INFO',
                'class': 'heating.log.PilotwireHandler',
                'logLength': 500,
            },
        },
        'loggers': {
            'heating.pilotwire': {
                'handlers': ['pilotwire_handler'],
                'level': 'INFO',
            },
        },
    }

    # Authentication
    AUTHENTICATION_BACKENDS = [
        'core.auth.backends.SettingsBackend',
    ] + Common.AUTHENTICATION_BACKENDS  # pylint: disable=no-member
    ADMIN_LOGIN = values.Value()
    ADMIN_PASSWORD = values.SecretValue()
